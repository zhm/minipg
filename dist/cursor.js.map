{"version":3,"sources":["../src/cursor.js"],"names":[],"mappings":"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","file":"cursor.js","sourcesContent":["export default class Cursor {\n  constructor(client) {\n    this.client = client;\n    this.batchOffset = 0;\n    this.batchStart = 0;\n    this.batch = [];\n    this.index = 0;\n    this.columns = null;\n    this.finished = false;\n    this.needsMetadata = true;\n  }\n\n  each(callback) {\n    this.next((err, {finished, columns, values, index, client}) => {\n      /* eslint-disable callback-return */\n      callback(err, {finished, columns, values, index, client});\n      /* eslint-enable callback-return */\n\n      if (!finished) {\n        this.each(callback);\n      }\n    });\n  }\n\n  eachBatch(callback) {\n    this.nextBatch(() => {\n      /* eslint-disable callback-return */\n      callback(this.error,\n               this.finished,\n               this.columns,\n               this.batch,\n               this.index);\n      /* eslint-enable callback-return */\n\n      this.index += this.batch.length;\n\n      if (!this.finished) {\n        this.eachBatch(callback);\n      }\n    });\n  }\n\n  next(callback) {\n    const processResult = () => {\n      let values = null;\n\n      const batchOffset = this.batchOffset;\n\n      if (this.batch.length) {\n        const row = this.batch[this.batchOffset];\n\n        this.batchOffset += 1;\n\n        values = row ? row.values : null;\n      }\n\n      /* eslint-disable callback-return */\n      callback(this.error,\n               {finished: this.finished && this.batchOffset === this.batch.length,\n                columns: this.columns,\n                values: values,\n                index: this.batchStart + batchOffset,\n                client: this.client});\n      /* eslint-enable callback-return */\n    };\n\n    if (this.batchOffset < this.batch.length) {\n      if (this.batchOffset % 1000 === 0) {\n        process.nextTick(processResult);\n      } else {\n        processResult();\n      }\n    } else {\n      // we need to fetch the next batch into memory\n      this.nextBatch(processResult);\n    }\n  }\n\n  nextBatch(callback) {\n    if (this.needsMetadata) {\n      this.index = 0;\n      this.columns = null;\n    }\n\n    this.client.getResults(this.needsMetadata, (results) => {\n      this.needsMetadata = false;\n      this.batch = results;\n      this.batchOffset = 0;\n      this.finished = this.client.nativeClient.finished();\n\n      const hasResult = results && results.length;\n\n      const hasColumns = hasResult && results[0] && results[0].columns;\n\n      // results == [ null ]\n      const emptyResultSet = hasResult &&\n                             results[results.length - 1] == null;\n\n      // results == [ ..., {} ]\n      const endOfResultSet = hasResult &&\n                             results[results.length - 1] &&\n                             results[results.length - 1].values == null;\n\n      if (hasColumns) {\n        this.batchStart = 0;\n        this.columns = results[0].columns;\n      }\n\n      // There are several possible states here because the client supports\n      // multiple result sets in a single query and the complexity that batching adds.\n      //\n      // finished?               -> we are done, don't do anything\n      // results === []          -> it's the signal of finished result set\n      // results === [ null ]    -> a query that had no result set all (no column def, just a command like CREATE TABLE)\n      // results === [ ..., {} ] -> the end of a result set has a {} at the end, note that this is NOT the end\n      //                            of the entire cursor stream because there might be more SELECT queries in the command\n      //                            text. If there are, this section below resets the index and the metadata flag so\n      //                            that the next call to getResults will request the column metadata of the next query.\n      //                            This is important when, for example, there are 2 completely different SELECT statements\n      //                            in the command text. In that case we need to ask for metadata twice.\n      if (!this.finished && (emptyResultSet || endOfResultSet)) {\n        this.needsMetadata = true;\n      }\n\n      const error = this.client.lastError;\n\n      if (error) {\n        this.error = error;\n      }\n\n      /* eslint-disable callback-return */\n      callback();\n      /* eslint-enable callback-return */\n\n      if (results) {\n        this.batchStart += results.length;\n      }\n\n      if (endOfResultSet) {\n        this.batchStart = 0;\n      }\n    });\n  }\n}\n"]}