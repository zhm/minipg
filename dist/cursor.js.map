{"version":3,"file":"cursor.js","names":["Cursor","exports","client","_classCallCheck","batchOffset","batchStart","batch","index","columns","finished","needsMetadata","_createClass","key","value","each","callback","_this","next","err","_ref","values","done","eachBatch","_this2","nextBatch","length","error","_this3","_index","processResult","row","process","nextTick","_this4","getResults","results","nativeClient","hasResult","hasColumns","emptyResultSet","endOfResultSet","lastError"],"sources":["../src/cursor.js"],"sourcesContent":["export default class Cursor {\n  constructor(client) {\n    this.client = client;\n    this.batchOffset = 0;\n    this.batchStart = 0;\n    this.batch = [];\n    this.index = 0;\n    this.columns = null;\n    this.finished = false;\n    this.needsMetadata = true;\n  }\n\n  each(callback) {\n    this.next((err, {finished, columns, values, index, client}) => {\n      const done = () => {\n        if (!finished) {\n          this.each(callback);\n        }\n      };\n\n      callback(err, {finished, columns, values, index, client, done});\n    });\n  }\n\n  eachBatch(callback) {\n    this.nextBatch(() => {\n      const done = () => {\n        this.index += this.batch.length;\n\n        if (!this.finished) {\n          this.eachBatch(callback);\n        }\n      };\n\n      /* eslint-disable callback-return */\n      callback(this.error,\n               {finished: this.finished,\n                columns: this.columns,\n                values: this.batch,\n                index: this.index,\n                client: this.client,\n                done});\n      /* eslint-enable callback-return */\n    });\n  }\n\n  next(callback) {\n    this._index = this._index != null ? this._index : 0;\n\n    const processResult = () => {\n      let values = null;\n\n      if (this.batch.length) {\n        const row = this.batch[this.batchOffset];\n\n        this.batchOffset += 1;\n\n        values = row ? row.values : null;\n      }\n\n      /* eslint-disable callback-return */\n      callback(this.error,\n               {finished: this.finished && this.batchOffset === this.batch.length,\n                columns: this.columns,\n                values: values,\n                index: this._index,\n                client: this.client});\n\n      this._index++;\n      /* eslint-enable callback-return */\n    };\n\n    if (this.batchOffset < this.batch.length) {\n      if (this.batchOffset % 1000 === 0) {\n        process.nextTick(processResult);\n      } else {\n        processResult();\n      }\n    } else {\n      // we need to fetch the next batch into memory\n      this.nextBatch(processResult);\n    }\n  }\n\n  nextBatch(callback) {\n    if (this.needsMetadata) {\n      this.index = 0;\n      this.columns = null;\n    }\n\n    this.client.getResults(this.needsMetadata, (results) => {\n      this.needsMetadata = false;\n      this.batch = results;\n      this.batchOffset = 0;\n      this.finished = this.client.nativeClient.finished();\n\n      const hasResult = results && results.length;\n\n      const hasColumns = hasResult && results[0] && results[0].columns;\n\n      // results == [ null ]\n      const emptyResultSet = hasResult &&\n                             results[results.length - 1] == null;\n\n      // results == [ ..., {} ]\n      const endOfResultSet = hasResult &&\n                             results[results.length - 1] &&\n                             results[results.length - 1].values == null;\n\n      if (hasColumns) {\n        this.batchStart = 0;\n        this.columns = results[0].columns;\n      }\n\n      // There are several possible states here because the client supports\n      // multiple result sets in a single query and the complexity that batching adds.\n      //\n      // finished?               -> we are done, don't do anything\n      // results === []          -> it's the signal of finished result set\n      // results === [ null ]    -> a query that had no result set all (no column def, just a command like CREATE TABLE)\n      // results === [ ..., {} ] -> the end of a result set has a {} at the end, note that this is NOT the end\n      //                            of the entire cursor stream because there might be more SELECT queries in the command\n      //                            text. If there are, this section below resets the index and the metadata flag so\n      //                            that the next call to getResults will request the column metadata of the next query.\n      //                            This is important when, for example, there are 2 completely different SELECT statements\n      //                            in the command text. In that case we need to ask for metadata twice.\n      if (!this.finished && (emptyResultSet || endOfResultSet)) {\n        this.needsMetadata = true;\n      }\n\n      const error = this.client.lastError;\n\n      if (error) {\n        this.error = error;\n      }\n\n      /* eslint-disable callback-return */\n      callback();\n      /* eslint-enable callback-return */\n\n      if (results) {\n        this.batchStart += results.length;\n      }\n\n      if (endOfResultSet) {\n        this.batchStart = 0;\n      }\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}