{"version":3,"sources":["../src/cursor.js"],"names":[],"mappings":"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","file":"cursor.js","sourcesContent":["export default class Cursor {\n  constructor(client) {\n    this.client = client;\n    this.batchOffset = 0;\n    this.batch = [];\n    this.index = -1;\n    this.columns = null;\n    this.finished = false;\n  }\n\n  each(callback) {\n    this.next((err, finished, columns, row, index) => {\n      /* eslint-disable callback-return */\n      callback(err, finished, columns, row, index);\n      /* eslint-enable callback-return */\n\n      if (!finished) {\n        this.each(callback);\n      }\n    });\n  }\n\n  eachBatch(callback) {\n    this.nextBatch(() => {\n      /* eslint-disable callback-return */\n      callback(this.error,\n               this.finished,\n               this.columns,\n               this.batch,\n               this.index);\n      /* eslint-enable callback-return */\n\n      this.index += this.batch.length;\n\n      if (!this.finished) {\n        this.eachBatch(callback);\n      }\n    });\n  }\n\n  next(callback) {\n    const processResult = () => {\n      let values = null;\n\n      if (this.batch.length) {\n        const row = this.batch[this.batchOffset];\n\n        this.batchOffset += 1;\n\n        if (row && row.values) {\n          this.index += 1;\n        }\n\n        values = row ? row.values : null;\n      }\n\n      callback(this.error,\n               this.finished && this.batchOffset === this.batch.length,\n               this.columns,\n               values,\n               this.index);\n    };\n\n    if (this.batchOffset < this.batch.length) {\n      if (this.batchOffset % 1000 === 0) {\n        process.nextTick(processResult);\n      } else {\n        processResult();\n      }\n    } else {\n      // we need to fetch the next batch into memory\n      this.nextBatch(processResult);\n    }\n  }\n\n  nextBatch(callback) {\n    const returnMetadata = (this.index === -1);\n\n    this.client.getResults(returnMetadata, (results) => {\n      // If we got 0 results and it's busy, we are now fully waiting on the database server\n      // for data. In this case, wait a very small amount of time and process it again. Keep\n      // doing this until we get out of this loop. Once we get at least one result it will\n      // fall out of this process. Waiting 1ms also keeps this from melting the CPU in this\n      // 'spinlock' waiting for data.\n      if (results.length === 0 && this.client.nativeClient.busy()) {\n        setTimeout(() => {\n          this.nextBatch(callback);\n        }, 1);\n\n        return;\n      }\n\n      this.batch = results;\n      this.batchOffset = 0;\n      this.finished = this.client.nativeClient.finished();\n\n      if (!this.columns) {\n        this.columns = results && results.length && results[0] && results[0].columns ? results[0].columns : null;\n      }\n\n      const error = this.client.lastError;\n\n      if (error) {\n        this.error = error;\n      }\n\n      callback();\n    });\n  }\n}\n"]}