{"version":3,"sources":["../src/index.js"],"names":["createPool","NativeClient","require","Client","genericPool","defaultNoticeProcessor","message","console","warn","nextClientID","constructor","nativeClient","id","connect","string","callback","err","setNoticeProcessor","query","sql","finished","Error","getResult","returnMetadata","setImmediate","getResults","close","processor","lastError","error","queryError","prop","hasOwnProperty","options","Pool","name","create","db","client","destroy","max","idleTimeoutMillis","reapIntervalMillis","log"],"mappings":"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","file":"index.js","sourcesContent":["const NativeClient = require('bindings')('addon').Client;\nconst genericPool = require('generic-pool');\n\nimport Cursor from './cursor';\n\nfunction defaultNoticeProcessor(message) {\n  console.warn(message);\n}\n\nlet nextClientID = 0;\n\nexport class Client {\n  constructor() {\n    this.nativeClient = new NativeClient();\n    this.id = ++nextClientID;\n  }\n\n  connect(string, callback) {\n    this.nativeClient.connect(string, (err) => {\n      if (err) {\n        return callback(err, this);\n      }\n\n      this.nativeClient.setNoticeProcessor(Client.defaultNoticeProcessor || defaultNoticeProcessor);\n\n      return callback(null, this);\n    });\n  }\n\n  query(sql) {\n    if (!this.nativeClient.finished()) {\n      throw new Error('client in use', this.id);\n    }\n\n    this.nativeClient.query(sql);\n\n    return new Cursor(this);\n  }\n\n  // fetch a single result record\n  getResult(returnMetadata, callback) {\n    Client.setImmediate(() => {\n      callback(this.nativeClient.getResult(returnMetadata));\n    });\n  }\n\n  getResults(returnMetadata, callback) {\n    Client.setImmediate(() => {\n      callback(this.nativeClient.getResults(returnMetadata));\n    });\n  }\n\n  close() {\n    return this.nativeClient.close();\n  }\n\n  setNoticeProcessor(processor) {\n    this.nativeClient.setNoticeProcessor(processor);\n  }\n\n  get lastError() {\n    const error = this.nativeClient.lastError();\n\n    if (error == null) {\n      return null;\n    }\n\n    const queryError = new Error();\n\n    for (const prop in error) {\n      if (error.hasOwnProperty(prop)) {\n        queryError[prop] = error[prop];\n      }\n    }\n\n    return queryError;\n  }\n}\n\nClient.setImmediate = setImmediate;\nClient.defaultNoticeProcessor = defaultNoticeProcessor;\n\nexport function createPool(options) {\n  /* eslint-disable new-cap */\n  return genericPool.Pool({\n    name: options.name || 'minipg',\n    create: (callback) => {\n      new Client().connect(options.db, (err, client) => {\n        if (err) {\n          return callback(client ? client.lastError : err);\n        }\n\n        return callback(null, client);\n      });\n    },\n    destroy: (client) => {\n      client.close();\n    },\n    max: options.max || 10,\n    idleTimeoutMillis: options.idleTimeoutMillis || 30000,\n    reapIntervalMillis: options.reapIntervalMillis || 1000,\n    log: options.log\n  });\n  /* eslint-enable new-cap */\n}\n"]}