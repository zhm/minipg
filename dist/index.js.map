{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;QAyDgB,U,GAAA,U;;AAtDhB;;;;;;AAHA,MAAM,eAAe,QAAQ,UAAR,EAAoB,OAApB,EAA6B,MAAlD;AACA,MAAM,cAAc,QAAQ,cAAR,CAApB;;AAIA,SAAS,sBAAT,CAAgC,OAAhC,EAAyC;AACvC,UAAQ,IAAR,CAAa,OAAb;AACD;;AAED,IAAI,eAAe,CAAnB;;AAEO,MAAM,MAAN,CAAa;AAClB,gBAAc;AACZ,SAAK,YAAL,GAAoB,IAAI,YAAJ,EAApB;AACA,SAAK,EAAL,GAAU,EAAE,YAAZ;AACD;;AAED,UAAQ,MAAR,EAAgB;AACd,SAAK,YAAL,CAAkB,OAAlB,CAA0B,MAA1B;AACA,SAAK,YAAL,CAAkB,kBAAlB,CAAqC,OAAO,sBAAP,IAAiC,sBAAtE;AACA,WAAO,IAAP;AACD;;AAED,QAAM,GAAN,EAAW;AACT,QAAI,CAAC,KAAK,YAAL,CAAkB,QAAlB,EAAL,EAAmC;AACjC,YAAM,IAAI,KAAJ,CAAU,eAAV,EAA2B,KAAK,EAAhC,CAAN;AACD;;AAED,SAAK,YAAL,CAAkB,KAAlB,CAAwB,GAAxB;;AAEA,WAAO,qBAAW,IAAX,CAAP;AACD;;;AAGD,YAAU,cAAV,EAA0B,QAA1B,EAAoC;AAClC,iBAAa,MAAM;AACjB,eAAS,KAAK,YAAL,CAAkB,SAAlB,CAA4B,cAA5B,CAAT;AACD,KAFD;AAGD;;AAED,aAAW,cAAX,EAA2B,QAA3B,EAAqC;AACnC,iBAAa,MAAM;AACjB,eAAS,KAAK,YAAL,CAAkB,UAAlB,CAA6B,cAA7B,CAAT;AACD,KAFD;AAGD;;AAED,UAAQ;AACN,WAAO,KAAK,YAAL,CAAkB,KAAlB,EAAP;AACD;;AAED,qBAAmB,SAAnB,EAA8B;AAC5B,SAAK,YAAL,CAAkB,kBAAlB,CAAqC,SAArC;AACD;AAzCiB;;QAAP,M,GAAA,M;AA4Cb,OAAO,sBAAP,GAAgC,sBAAhC;;AAEO,SAAS,UAAT,CAAoB,OAApB,EAA6B;;AAElC,SAAO,YAAY,IAAZ,CAAiB;AACtB,UAAM,QAAQ,IAAR,IAAgB,QADA;AAEtB,YAAS,QAAD,IAAc;AACpB,UAAI;AACF,eAAO,SAAS,IAAT,EAAe,IAAI,MAAJ,GAAa,OAAb,CAAqB,QAAQ,EAA7B,CAAf,CAAP;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,eAAO,SAAS,GAAT,CAAP;AACD;AACF,KARqB;AAStB,aAAU,MAAD,IAAY;AACnB,aAAO,KAAP;AACD,KAXqB;AAYtB,SAAK,QAAQ,GAAR,IAAe,EAZE;AAatB,uBAAmB,QAAQ,iBAAR,IAA6B,KAb1B;AActB,wBAAoB,QAAQ,kBAAR,IAA8B,IAd5B;AAetB,SAAK,QAAQ;AAfS,GAAjB,CAAP;;AAkBD","file":"index.js","sourcesContent":["const NativeClient = require('bindings')('addon').Client;\nconst genericPool = require('generic-pool');\n\nimport Cursor from './cursor';\n\nfunction defaultNoticeProcessor(message) {\n  console.warn(message);\n}\n\nlet nextClientID = 0;\n\nexport class Client {\n  constructor() {\n    this.nativeClient = new NativeClient();\n    this.id = ++nextClientID;\n  }\n\n  connect(string) {\n    this.nativeClient.connect(string);\n    this.nativeClient.setNoticeProcessor(Client.defaultNoticeProcessor || defaultNoticeProcessor);\n    return this;\n  }\n\n  query(sql) {\n    if (!this.nativeClient.finished()) {\n      throw new Error('client in use', this.id);\n    }\n\n    this.nativeClient.query(sql);\n\n    return new Cursor(this);\n  }\n\n  // fetch a single result record\n  getResult(returnMetadata, callback) {\n    setImmediate(() => {\n      callback(this.nativeClient.getResult(returnMetadata));\n    });\n  }\n\n  getResults(returnMetadata, callback) {\n    setImmediate(() => {\n      callback(this.nativeClient.getResults(returnMetadata));\n    });\n  }\n\n  close() {\n    return this.nativeClient.close();\n  }\n\n  setNoticeProcessor(processor) {\n    this.nativeClient.setNoticeProcessor(processor);\n  }\n}\n\nClient.defaultNoticeProcessor = defaultNoticeProcessor;\n\nexport function createPool(options) {\n  /* eslint-disable new-cap */\n  return genericPool.Pool({\n    name: options.name || 'minipg',\n    create: (callback) => {\n      try {\n        return callback(null, new Client().connect(options.db));\n      } catch (err) {\n        return callback(err);\n      }\n    },\n    destroy: (client) => {\n      client.close();\n    },\n    max: options.max || 10,\n    idleTimeoutMillis: options.idleTimeoutMillis || 30000,\n    reapIntervalMillis: options.reapIntervalMillis || 1000,\n    log: options.log\n  });\n  /* eslint-enable new-cap */\n}\n"]}