{"version":3,"sources":["../src/index.js"],"names":["NativeClient","require","Client","genericPool","defaultNoticeProcessor","message","console","warn","nextClientID","nativeClient","id","string","callback","connect","err","setNoticeProcessor","sql","finished","Error","query","Cursor","returnMetadata","setImmediate","getResult","getResults","close","processor","error","lastError","queryError","prop","hasOwnProperty","createPool","options","Pool","name","create","db","client","destroy","max","idleTimeoutMillis","reapIntervalMillis","log"],"mappings":"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","sourcesContent":["const NativeClient = require('bindings')('addon').Client;\nconst genericPool = require('generic-pool');\n\nimport Cursor from './cursor';\n\nfunction defaultNoticeProcessor(message) {\n  console.warn(message);\n}\n\nlet nextClientID = 0;\n\nexport class Client {\n  constructor() {\n    this.nativeClient = new NativeClient();\n    this.id = ++nextClientID;\n  }\n\n  connect(string, callback) {\n    this.nativeClient.connect(string, (err) => {\n      if (err) {\n        return callback(err, this);\n      }\n\n      this.nativeClient.setNoticeProcessor(Client.defaultNoticeProcessor || defaultNoticeProcessor);\n\n      return callback(null, this);\n    });\n  }\n\n  query(sql) {\n    if (!this.nativeClient.finished()) {\n      throw new Error('client in use', this.id);\n    }\n\n    this.nativeClient.query(sql);\n\n    return new Cursor(this);\n  }\n\n  // fetch a single result record\n  getResult(returnMetadata, callback) {\n    Client.setImmediate(() => {\n      callback(this.nativeClient.getResult(returnMetadata));\n    });\n  }\n\n  getResults(returnMetadata, callback) {\n    Client.setImmediate(() => {\n      callback(this.nativeClient.getResults(returnMetadata));\n    });\n  }\n\n  close() {\n    return this.nativeClient.close();\n  }\n\n  setNoticeProcessor(processor) {\n    this.nativeClient.setNoticeProcessor(processor);\n  }\n\n  get lastError() {\n    const error = this.nativeClient.lastError();\n\n    if (error == null) {\n      return null;\n    }\n\n    const queryError = new Error();\n\n    for (const prop in error) {\n      if (error.hasOwnProperty(prop)) {\n        queryError[prop] = error[prop];\n      }\n    }\n\n    return queryError;\n  }\n}\n\nClient.setImmediate = setImmediate;\nClient.defaultNoticeProcessor = defaultNoticeProcessor;\n\nexport function createPool(options) {\n  /* eslint-disable new-cap */\n  return genericPool.Pool({\n    name: options.name || 'minipg',\n    create: (callback) => {\n      new Client().connect(options.db, (err, client) => {\n        if (err) {\n          return callback(client ? (client.lastError || err) : err);\n        }\n\n        return callback(null, client);\n      });\n    },\n    destroy: (client) => {\n      if (client) {\n        client.close();\n      }\n    },\n    max: options.max || 10,\n    idleTimeoutMillis: options.idleTimeoutMillis || 30000,\n    reapIntervalMillis: options.reapIntervalMillis || 1000,\n    log: options.log\n  });\n  /* eslint-enable new-cap */\n}\n"],"file":"index.js"}